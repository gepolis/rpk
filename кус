import sys
import json
import socket
import threading
from pathlib import Path
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,
                               QComboBox, QLabel, QListWidget, QTabWidget,
                               QHBoxLayout, QTextEdit, QLineEdit, QPushButton)
from PySide6.QtCore import Qt, QTimer

CONFIG_PATH = Path("rp_config.json")
FORMATS_PATH = Path("formats.json")
PHRASES_PATH = Path("rp_phrases.json")

DEFAULT_CONFIG = {
    "org": "Полиция",
    "org_gen": "Полиции",
    "rang": "Офицер",
    "rang_gen": "Офицера",
    "name": "Анна",
    "server_ip": "127.0.0.1",
    "server_port": 12345
}

class RPClient(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("RP Отправитель")
        self.setMinimumSize(700, 500)
        self.setStyleSheet("""
            QWidget {
                background-color: #f5f5f5;
                font-family: 'Segoe UI';
                font-size: 14px;
            }
            QListWidget {
                background-color: #ffffff;
                border: 1px solid #cccccc;
                padding: 5px;
            }
            QPushButton {
                background-color: #0078d7;
                color: white;
                border: none;
                padding: 6px 12px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #005fa1;
            }
            QLineEdit, QComboBox {
                background-color: white;
                padding: 4px;
                border: 1px solid #cccccc;
                border-radius: 4px;
            }
            QLabel {
                color: #333333;
            }
        """)

        self.config = self.load_json(CONFIG_PATH, DEFAULT_CONFIG)
        self.formats = self.load_json(FORMATS_PATH, {})
        self.phrases = self.load_json(PHRASES_PATH, {})

        self.socket = None
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        self.create_main_tab()
        self.create_settings_tab()
        self.create_server_tab()

        self.connect_to_server()

    def load_json(self, path, default):
        if not path.exists():
            with open(path, 'w', encoding='utf-8') as f:
                json.dump(default, f, indent=4, ensure_ascii=False)
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)

    def create_main_tab(self):
        page = QWidget()
        layout = QHBoxLayout()
        self.category_box = QComboBox()
        self.subcategory_box = QComboBox()
        self.subsubcategory_box = QComboBox()
        self.phrase_list = QListWidget()

        self.category_box.currentTextChanged.connect(self.load_subcategories)
        self.subcategory_box.currentTextChanged.connect(self.load_subsubcategories)
        self.subsubcategory_box.currentTextChanged.connect(self.display_phrases)
        self.phrase_list.itemDoubleClicked.connect(self.send_selected_phrase)

        layout.addWidget(self.category_box)
        layout.addWidget(self.subcategory_box)
        layout.addWidget(self.subsubcategory_box)
        layout.addWidget(self.phrase_list, 3)
        page.setLayout(layout)
        self.tabs.addTab(page, "Фразы")
        self.load_categories()

    def create_settings_tab(self):
        page = QWidget()
        layout = QVBoxLayout()
        self.org_input = QLineEdit(self.config.get("org"))
        self.org_gen_input = QLineEdit(self.config.get("org_gen", ""))
        self.rang_input = QLineEdit(self.config.get("rang"))
        self.rang_gen_input = QLineEdit(self.config.get("rang_gen", ""))
        self.name_input = QLineEdit(self.config.get("name"))

        layout.addWidget(QLabel("Организация"))
        layout.addWidget(self.org_input)
        layout.addWidget(QLabel("Организация (Р.п.)"))
        layout.addWidget(self.org_gen_input)
        layout.addWidget(QLabel("Должность"))
        layout.addWidget(self.rang_input)
        layout.addWidget(QLabel("Должность (Р.п.)"))
        layout.addWidget(self.rang_gen_input)
        layout.addWidget(QLabel("Имя"))
        layout.addWidget(self.name_input)

        save_btn = QPushButton("Сохранить")
        save_btn.clicked.connect(self.save_config)
        layout.addWidget(save_btn)
        page.setLayout(layout)
        self.tabs.addTab(page, "Настройки")

    def create_server_tab(self):
        page = QWidget()
        layout = QVBoxLayout()
        self.ip_input = QLineEdit(self.config.get("server_ip"))
        self.port_input = QLineEdit(str(self.config.get("server_port")))
        self.connect_btn = QPushButton("Подключиться")
        self.status_label = QLabel("Не подключено")
        self.log_output = QTextEdit()
        self.log_output.setReadOnly(True)

        self.connect_btn.clicked.connect(self.manual_connect)

        layout.addWidget(QLabel("IP сервера"))
        layout.addWidget(self.ip_input)
        layout.addWidget(QLabel("Порт"))
        layout.addWidget(self.port_input)
        layout.addWidget(self.connect_btn)
        layout.addWidget(self.status_label)
        layout.addWidget(self.log_output)
        page.setLayout(layout)
        self.tabs.addTab(page, "Сервер")

    def log(self, text):
        self.log_output.append(text)

    def save_config(self):
        self.config.update({
            "org": self.org_input.text(),
            "org_gen": self.org_gen_input.text(),
            "rang": self.rang_input.text(),
            "rang_gen": self.rang_gen_input.text(),
            "name": self.name_input.text(),
            "server_ip": self.ip_input.text(),
            "server_port": int(self.port_input.text())
        })
        with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
            json.dump(self.config, f, indent=4, ensure_ascii=False)
        self.log("[INFO] Настройки сохранены")

    def connect_to_server(self):
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.connect((self.config['server_ip'], self.config['server_port']))
            self.socket.sendall(b"sender\n")
            self.status_label.setText("Подключено")
            self.log("[INFO] Подключено к серверу")
        except Exception as e:
            self.status_label.setText("Ошибка подключения")
            self.log(f"[ERROR] {e}")

    def manual_connect(self):
        self.save_config()
        self.connect_to_server()

    def load_categories(self):
        self.category_box.clear()
        self.category_box.addItems(self.phrases.keys())

    def load_subcategories(self, category):
        self.subcategory_box.clear()
        subcats = self.phrases.get(category, {})
        self.subcategory_box.addItems(subcats.keys())

    def load_subsubcategories(self, subcategory):
        category = self.category_box.currentText()
        self.subsubcategory_box.clear()
        subsubcats = self.phrases.get(category, {}).get(subcategory, {})
        self.subsubcategory_box.addItems(subsubcats.keys())

    def display_phrases(self):
        self.phrase_list.clear()
        category = self.category_box.currentText()
        subcat = self.subcategory_box.currentText()
        subsubcat = self.subsubcategory_box.currentText()
        phrases = self.phrases.get(category, {}).get(subcat, {}).get(subsubcat, [])
        self.phrase_list.addItems(phrases)

    def send_selected_phrase(self, item):
        text = item.text()
        text = text.format(**self.config)
        prefix = self.formats.get(self.category_box.currentText(), {}).get(self.subcategory_box.currentText(), {}).get("prefix", "")
        suffix = self.formats.get(self.category_box.currentText(), {}).get(self.subcategory_box.currentText(), {}).get("suffix", "")
        full_text = f"{prefix}{text}{suffix}"
        if self.socket:
            try:
                self.socket.sendall(full_text.encode("utf-8"))
                self.log(f"[SEND] {full_text}")
            except Exception as e:
                self.log(f"[ERROR] {e}")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    client = RPClient()
    client.show()
    sys.exit(app.exec())
