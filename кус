import sys
import socket
import json
from pathlib import Path
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QListWidget, QLabel,
    QStackedWidget, QListWidgetItem, QTextEdit, QLineEdit, QPushButton, QTabWidget,
    QFormLayout, QComboBox, QSplitter, QMessageBox
)
from PySide6.QtCore import Qt, QTimer, Slot

CONFIG_PATH = Path("rp_config.json")
FORMATS_PATH = Path("formats.json")
PHRASES_PATH = Path("rp_phrases.json")

DEFAULT_CONFIG = {
    "org": "Полиция",
    "org_gen": "Полиции",
    "rang": "Офицер",
    "rang_gen": "Офицера",
    "name": "Анна",
    "server_ip": "127.0.0.1",
    "server_port": 12345
}

class RPClient(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("RP Клиент")
        self.setMinimumSize(900, 600)
        self.config = self.load_json(CONFIG_PATH, DEFAULT_CONFIG)
        self.formats = self.load_json(FORMATS_PATH, {})
        self.phrases = self.load_json(PHRASES_PATH, {})
        self.socket = None
        self.connected = False
        self.init_ui()
        self.connect_to_server()

    def load_json(self, path, default):
        if not path.exists():
            with open(path, 'w', encoding='utf-8') as f:
                json.dump(default, f, indent=2, ensure_ascii=False)
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)

    def init_ui(self):
        tabs = QTabWidget()
        tabs.addTab(self.create_main_tab(), "Реплики")
        tabs.addTab(self.create_settings_tab(), "Настройки")
        tabs.addTab(self.create_server_tab(), "Сервер")
        tabs.currentChanged.connect(self.on_tab_change)
        self.setCentralWidget(tabs)

    def create_main_tab(self):
        widget = QWidget()
        layout = QHBoxLayout(widget)

        self.category_list = QListWidget()
        self.subcategory_list = QListWidget()
        self.subsubcategory_list = QListWidget()
        self.phrase_list = QListWidget()

        self.category_list.itemClicked.connect(self.load_subcategories)
        self.subcategory_list.itemClicked.connect(self.load_subsubcategories)
        self.subsubcategory_list.itemClicked.connect(self.load_phrases)
        self.phrase_list.itemDoubleClicked.connect(self.send_phrase)

        for category in self.phrases:
            self.category_list.addItem(category)

        splitter = QSplitter(Qt.Horizontal)
        splitter.addWidget(self.category_list)
        splitter.addWidget(self.subcategory_list)
        splitter.addWidget(self.subsubcategory_list)
        splitter.addWidget(self.phrase_list)

        layout.addWidget(splitter)
        return widget

    def create_settings_tab(self):
        widget = QWidget()
        form = QFormLayout(widget)

        self.org_input = QLineEdit(self.config.get("org", ""))
        self.org_gen_input = QLineEdit(self.config.get("org_gen", ""))
        self.rang_input = QLineEdit(self.config.get("rang", ""))
        self.rang_gen_input = QLineEdit(self.config.get("rang_gen", ""))
        self.name_input = QLineEdit(self.config.get("name", ""))

        form.addRow("Организация:", self.org_input)
        form.addRow("Орг. (Род. падеж):", self.org_gen_input)
        form.addRow("Должность:", self.rang_input)
        form.addRow("Должн. (Род. падеж):", self.rang_gen_input)
        form.addRow("Имя:", self.name_input)

        save_btn = QPushButton("Сохранить")
        save_btn.clicked.connect(self.save_settings)
        form.addRow(save_btn)

        return widget

    def create_server_tab(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)

        self.server_ip_input = QLineEdit(self.config.get("server_ip", ""))
        self.server_port_input = QLineEdit(str(self.config.get("server_port", 12345)))
        self.connect_btn = QPushButton("Подключиться")
        self.connect_btn.clicked.connect(self.connect_to_server_manual)

        layout.addWidget(QLabel("IP сервера:"))
        layout.addWidget(self.server_ip_input)
        layout.addWidget(QLabel("Порт:"))
        layout.addWidget(self.server_port_input)
        layout.addWidget(self.connect_btn)

        self.server_log = QTextEdit()
        self.server_log.setReadOnly(True)
        layout.addWidget(QLabel("Логи:"))
        layout.addWidget(self.server_log)

        return widget

    def on_tab_change(self, index):
        if index != 2:  # если не вкладка сервер
            self.server_log.clear()

    def save_settings(self):
        self.config["org"] = self.org_input.text()
        self.config["org_gen"] = self.org_gen_input.text()
        self.config["rang"] = self.rang_input.text()
        self.config["rang_gen"] = self.rang_gen_input.text()
        self.config["name"] = self.name_input.text()
        self.config["server_ip"] = self.server_ip_input.text()
        self.config["server_port"] = int(self.server_port_input.text())
        with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
            json.dump(self.config, f, indent=2, ensure_ascii=False)
        QMessageBox.information(self, "Настройки", "Настройки сохранены")

    def load_subcategories(self, item):
        self.subcategory_list.clear()
        self.subsubcategory_list.clear()
        self.phrase_list.clear()
        cat = item.text()
        for subcat in self.phrases[cat]:
            self.subcategory_list.addItem(subcat)

    def load_subsubcategories(self, item):
        self.subsubcategory_list.clear()
        self.phrase_list.clear()
        cat = self.category_list.currentItem().text()
        subcat = item.text()
        for subsubcat in self.phrases[cat][subcat]:
            self.subsubcategory_list.addItem(subsubcat)

    def load_phrases(self, item):
        self.phrase_list.clear()
        cat = self.category_list.currentItem().text()
        subcat = self.subcategory_list.currentItem().text()
        subsubcat = item.text()
        phrases = self.phrases[cat][subcat][subsubcat]
        if isinstance(phrases, list):
            for phrase in phrases:
                self.phrase_list.addItem(phrase)

    def format_phrase(self, text):
        text = text.format(
            org=self.config.get("org", ""),
            org_gen=self.config.get("org_gen", ""),
            rang=self.config.get("rang", ""),
            rang_gen=self.config.get("rang_gen", ""),
            name=self.config.get("name", "")
        )
        try:
            cat = self.category_list.currentItem().text()
            subcat = self.subcategory_list.currentItem().text()
            subsubcat = self.subsubcategory_list.currentItem().text()
            fmt = self.formats.get(cat, {}).get(subcat, {})
            prefix = fmt.get("prefix", "")
            suffix = fmt.get("suffix", "")
            return f"{prefix}{text}{suffix}"
        except:
            return text

    def connect_to_server(self):
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.connect((self.config["server_ip"], self.config["server_port"]))
            self.socket.sendall(b"sender")
            self.connected = True
        except Exception as e:
            print(f"[Ошибка подключения] {e}")

    def connect_to_server_manual(self):
        if self.connected:
            self.socket.close()
            self.connected = False
        self.connect_to_server()
        if self.connected:
            self.server_log.append("Подключено к серверу")
        else:
            self.server_log.append("Не удалось подключиться")

    def send_phrase(self, item):
        if not self.connected:
            QMessageBox.warning(self, "Ошибка", "Нет подключения к серверу")
            return
        phrase = self.format_phrase(item.text())
        self.socket.sendall(phrase.encode("utf-8"))

if __name__ == '__main__':
    app = QApplication(sys.argv)
    client = RPClient()
    client.show()
    sys.exit(app.exec())
