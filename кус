import sys
import json
import re
from pathlib import Path

from PySide6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout,
    QListWidget, QTextEdit, QLabel, QPushButton, QLineEdit,
    QStackedWidget, QTabWidget, QFormLayout, QMessageBox
)
from PySide6.QtCore import Qt

CONFIG_PATH = Path("rp_config.json")
PHRASES_PATH = Path("rp_phrases.json")
FORMATS_PATH = Path("formats.json")

DEFAULT_CONFIG = {
    # Организация во всех падежах
    "org_nomn": "Кошко-полиция",
    "org_gent": "Кошко-полиции",
    "org_datv": "Кошко-полиции",
    "org_accs": "Кошко-полицию",
    "org_ablt": "Кошко-полицией",
    "org_loct": "Кошко-полиции",
    # Звание во всех падежах
    "rang_nomn": "Майор",
    "rang_gent": "Майора",
    "rang_datv": "Майору",
    "rang_accs": "Майора",
    "rang_ablt": "Майором",
    "rang_loct": "Майоре",
    # Имя во всех падежах
    "name_nomn": "Рико",
    "name_gent": "Рико",
    "name_datv": "Рико",
    "name_accs": "Рико",
    "name_ablt": "Рико",
    "name_loct": "Рико",
    # Сервер
    "server_ip": "109.73.204.176",
    "server_port": 12345
}

# Падежи для выбора
CASES = ["nomn", "gent", "datv", "accs", "ablt", "loct"]

def format_phrase_with_cases(template, context):
    """
    Заменяет переменные с указанием падежа:
    {org:datv} -> context['org_datv']
    {rang:gent} -> context['rang_gent']
    Если падеж не указан, берём именительный (nomn)
    """
    pattern = re.compile(r"\{(\w+)(?::(\w+))?\}")

    def repl(m):
        key = m.group(1)
        case = m.group(2) if m.group(2) else "nomn"
        ctx_key = f"{key}_{case}"
        return context.get(ctx_key, f"{{{key}:{case}}}")

    return pattern.sub(repl, template)

class RPClient(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("RP Клиент с падежами из настроек")
        self.resize(750, 600)

        self.config = self.load_config()
        self.phrases = self.load_phrases()
        self.formats = self.load_formats()

        self.create_ui()
        self.populate_categories()

        self.connected = False

    def load_config(self):
        if CONFIG_PATH.exists():
            with open(CONFIG_PATH, "r", encoding="utf-8") as f:
                return json.load(f)
        else:
            with open(CONFIG_PATH, "w", encoding="utf-8") as f:
                json.dump(DEFAULT_CONFIG, f, ensure_ascii=False, indent=2)
            return DEFAULT_CONFIG.copy()

    def save_config(self):
        with open(CONFIG_PATH, "w", encoding="utf-8") as f:
            json.dump(self.config, f, ensure_ascii=False, indent=2)

    def load_phrases(self):
        if PHRASES_PATH.exists():
            with open(PHRASES_PATH, "r", encoding="utf-8") as f:
                return json.load(f)
        else:
            QMessageBox.critical(self, "Ошибка", f"Файл {PHRASES_PATH} не найден.")
            return {}

    def load_formats(self):
        if FORMATS_PATH.exists():
            with open(FORMATS_PATH, "r", encoding="utf-8") as f:
                return json.load(f)
        else:
            # Пример базового формата
            example_formats = {
                "Работа": {
                    "Остановка": {"prefix": "*", "suffix": "*"},
                    "Проверка": {"prefix": "*", "suffix": "*"},
                    "Задержание": {"prefix": "*", "suffix": "*"},
                    "Патруль": {"prefix": "*", "suffix": "*"},
                    "Сирена": {"prefix": "*", "suffix": "*"},
                    "Громкоговоритель": {"prefix": "", "suffix": ""},
                    "Документы": {"prefix": "*", "suffix": "*"},
                    "Опрос": {"prefix": "*", "suffix": "*"},
                    "Фразы": {"prefix": "", "suffix": ""}
                },
                "Личная жизнь": {
                    "Обычное": {"prefix": "*", "suffix": "*"},
                    "Флирт": {"prefix": "*", "suffix": "*"}
                },
                "НонРП": {
                    "Фразы": {"prefix": "//", "suffix": ""}
                }
            }
            with open(FORMATS_PATH, "w", encoding="utf-8") as f:
                json.dump(example_formats, f, ensure_ascii=False, indent=2)
            return example_formats

    def create_ui(self):
        main_layout = QVBoxLayout(self)

        self.tabs = QTabWidget()
        main_layout.addWidget(self.tabs)

        # --- Вкладка: Реплики ---
        phrases_tab = QWidget()
        phrases_layout = QVBoxLayout(phrases_tab)

        lists_layout = QHBoxLayout()

        self.category_list = QListWidget()
        self.category_list.setMaximumWidth(200)
        self.category_list.itemClicked.connect(self.on_category_selected)
        lists_layout.addWidget(self.category_list)

        self.subcategory_list = QListWidget()
        self.subcategory_list.setMaximumWidth(200)
        self.subcategory_list.itemClicked.connect(self.on_subcategory_selected)
        lists_layout.addWidget(self.subcategory_list)

        self.phrase_list = QListWidget()
        self.phrase_list.itemDoubleClicked.connect(self.on_phrase_double_clicked)
        lists_layout.addWidget(self.phrase_list)

        phrases_layout.addLayout(lists_layout)

        self.result_edit = QTextEdit()
        self.result_edit.setReadOnly(True)
        self.result_edit.setPlaceholderText(
            "Двойной клик по фразе — вывод с выбранными падежами и форматами..."
        )
        phrases_layout.addWidget(self.result_edit)

        self.tabs.addTab(phrases_tab, "Реплики")

        # --- Вкладка: Настройки ---
        settings_tab = QWidget()
        settings_layout = QVBoxLayout(settings_tab)

        form_layout = QFormLayout()

        # Для каждой переменной добавляем поля для падежей
        for var in ["org", "rang", "name"]:
            for case in CASES:
                key = f"{var}_{case}"
                val = self.config.get(key, "")
                label = f"{var.capitalize()} ({case})"
                edit = QLineEdit(val)
                setattr(self, f"{key}_edit", edit)
                form_layout.addRow(label, edit)

        settings_layout.addLayout(form_layout)

        save_btn = QPushButton("Сохранить настройки")
        save_btn.clicked.connect(self.on_save_settings)
        settings_layout.addWidget(save_btn)

        self.tabs.addTab(settings_tab, "Настройки")

        # --- Вкладка: Сервер ---
        server_tab = QWidget()
        server_layout = QVBoxLayout(server_tab)

        self.server_ip_edit = QLineEdit(self.config.get("server_ip", ""))
        self.server_port_edit = QLineEdit(str(self.config.get("server_port", "")))
        self.access_code_edit = QLineEdit()
        self.access_code_edit.setEchoMode(QLineEdit.Password)

        server_form = QFormLayout()
        server_form.addRow("IP сервера:", self.server_ip_edit)
        server_form.addRow("Порт сервера:", self.server_port_edit)
        server_form.addRow("Код доступа:", self.access_code_edit)

        server_layout.addLayout(server_form)

        self.connect_btn = QPushButton("Подключиться")
        self.connect_btn.clicked.connect(self.on_connect_clicked)
        server_layout.addWidget(self.connect_btn)

        self.status_label = QLabel("Статус: Не подключено")
        server_layout.addWidget(self.status_label)

        self.tabs.addTab(server_tab, "Сервер")

        self.tabs.currentChanged.connect(self.on_tab_changed)

    def on_save_settings(self):
        for var in ["org", "rang", "name"]:
            for case in CASES:
                key = f"{var}_{case}"
                edit = getattr(self, f"{key}_edit")
                self.config[key] = edit.text().strip()
        self.save_config()
        QMessageBox.information(self, "Настройки", "Настройки сохранены")

    def on_connect_clicked(self):
        code = self.access_code_edit.text().strip()
        if code != "6329":
            QMessageBox.warning(self, "Доступ запрещён", "Неверный код доступа")
            return
        ip = self.server_ip_edit.text().strip()
        port_text = self.server_port_edit.text().strip()
        if not ip or not port_text.isdigit():
            QMessageBox.warning(self, "Ошибка", "Введите корректный IP и порт")
            return
        self.config["server_ip"] = ip
        self.config["server_port"] = int(port_text)
        self.save_config()
        self.status_label.setText(f"Статус: Подключено к {ip}:{port_text}")
        self.connected = True

    def on_tab_changed(self, index):
        if index != 2:  # не вкладка Сервер
            self.connected = False
            self.status_label.setText("Статус: Не подключено")

    def populate_categories(self):
        self.category_list.clear()
        for cat in sorted(self.phrases.keys()):
            self.category_list.addItem(cat)
        self.subcategory_list.clear()
        self.phrase_list.clear()
        self.result_edit.clear()

    def on_category_selected(self, item):
        category = item.text()
        self.current_category = category
        self.subcategory_list.clear()
        self.phrase_list.clear()
        self.result_edit.clear()
        subcats = self.phrases.get(category, {})
        for subcat in sorted(subcats.keys()):
            self.subcategory_list.addItem(subcat)

    def on_subcategory_selected(self, item):
        subcat = item.text()
        self.current_subcategory = subcat
        self.phrase_list.clear()
        self.result_edit.clear()
        phrases_data = self.phrases[self.current_category][subcat]
        phrases = phrases_data.get("Фразы", [])
        for ph in phrases:
            self.phrase_list.addItem(ph)

    def on_phrase_double_clicked(self, item):
        phrase = item.text()
        context = {}
        for var in ["org", "rang", "name"]:
            for case in CASES:
                key = f"{var}_{case}"
                context[key] = self.config.get(key, "")
        formatted = format_phrase_with_cases(phrase, context)

        prefix = ""
        suffix = ""
        fmts = self.formats.get(self.current_category, {})
        if isinstance(fmts, dict):
            subfmt = fmts.get(self.current_subcategory, {})
            if isinstance(subfmt, dict):
                prefix = subfmt.get("prefix", "")
                suffix = subfmt.get("suffix", "")
            else:
                prefix = fmts.get("prefix", "")
                suffix = fmts.get("suffix", "")
        prefix = format_phrase_with_cases(prefix, context)
        suffix = format_phrase_with_cases(suffix, context)

        final_text = f"{prefix}{formatted}{suffix}"
        self.result_edit.setText(final_text)


def main():
    app = QApplication(sys.argv)
    window = RPClient()
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
